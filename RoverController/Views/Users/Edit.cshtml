@model RoverController.Web.ViewModels.EditUserViewModel

@using RoverController.Lib

@{
    ViewBag.Title = "Edit User";

    var controller = ViewContext.RouteData.Values["Controller"].ToString().ToLower();
    var action = ViewContext.RouteData.GetRequiredString("action").ToLower();
}

@section Header {

    @Styles.Render("~/Porto/vendor/css/pnotify")

}

@section Breadcrumbs {
    <header class="page-header">
        <h2>@ViewBag.Title</h2>

        <div class="right-wrapper text-right">
            <ol class="breadcrumbs">
                <li>
                    <a href="@Url.Action("Index", "Home")">
                        <i class="icons icon-home"></i>
                        <span>Dashboard</span>
                    </a>
                </li>
                <li>
                    <a href="@Url.Action("Index", "Users")">
                        <i class="icons icon-people"></i>
                        <span>Users</span>
                    </a>
                </li>
                <li>
                    <span>@ViewBag.Title</span>
                </li>
            </ol>

            @*<a class="sidebar-right-toggle" data-open="sidebar-right"></a>*@
        </div>
    </header>
}

<div class="row">
    <div class="col-lg-12">
        @using (Html.BeginForm("Edit", "Users", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
        {
            @Html.HiddenFor(m => m.Id)
            @Html.HiddenFor(m => m.ClientId)
            @Html.HiddenFor(m => m.PrimaryClientId)

            <section class="card">
                <div class="card-body">

                    @Html.Partial("~/Views/Account/pvRegisterUserFormFields.cshtml", Model)

                    @*<div class="form-group mb-3">
                            <div class="row">
                                <div class="col-lg-6 mb-3">
                                    @Html.LabelFor(m => m.RoleName, new { @class = "control-label" })
                                    @Html.DropDownListFor(m => m.RoleName, new SelectList(ViewBag.RolesList, "Key", "Value"), "", htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.RoleName, "", new { @class = "text-danger help-block small" })
                                </div>
                            </div>
                        </div>*@

                    <div class="form-group mb-3">
                        <div class="row">
                            <div class="col-lg-6 mb-3">
                                @Html.LabelFor(model => model.RoleId, new { @class = "control-label" })
                                @*@Html.DropDownListFor(model => model.User.RoleId, new SelectList(ViewBag.RolesList, "Key", "Value"), "", htmlAttributes: new { @class = "form-control" })*@

                                @{
                                    for (int index = 0; index < Model.RoleCheckboxes.Count(); index++)
                                    {
                                        <div>
                                            @if (ViewBag.CurrentUserHighestRoleOrder > Model.RoleCheckboxes[index].Order)
                                            {
                                                @Html.CheckBoxFor(x => x.RoleCheckboxes[index].IsSelected, new { disabled = "disabled" })
                                                <span>&nbsp;</span>
                                                @Html.DisplayFor(x => x.RoleCheckboxes[index].Name)

                                            }
                                            else
                                            {
                                                @Html.CheckBoxFor(x => x.RoleCheckboxes[index].IsSelected, new { })
                                                <span>&nbsp;</span>
                                                @Html.DisplayFor(x => x.RoleCheckboxes[index].Name)
                                            }
                                            @Html.HiddenFor(x => x.RoleCheckboxes[index].Id)
                                            @Html.HiddenFor(x => x.RoleCheckboxes[index].Name)
                                        </div>

                                        @*<div class="checkbox-custom checkbox-default">
                                                @{
                                                    var isDisabled = string.Empty;
                                                    if (ViewBag.CurrentUserHighestRoleOrder > Model.RoleCheckboxes[index].Order ||
                                                        !ViewHelper.IsAdmin)
                                                    {
                                                        //isDisabled = "disabled";
                                                    }
                                                    var isChecked = string.Empty;
                                                    if (Model.RoleCheckboxes[index].IsSelected)
                                                    {
                                                        isChecked = "checked";
                                                    }
                                                }
                                                <input type="checkbox" id="@Html.IdFor(x => x.RoleCheckboxes[index].IsSelected)" name="@Html.NameFor(x => x.RoleCheckboxes[index].IsSelected)" @isChecked @isDisabled>
                                                <label for="@Html.IdFor(x => x.RoleCheckboxes[index].IsSelected)">@Model.RoleCheckboxes[index].Name</label>
                                                <input type="hidden" name="@Html.NameFor(x => x.RoleCheckboxes[index].IsSelected)" value="@Model.RoleCheckboxes[index].IsSelected.ToString().ToLower()">
                                                @Html.HiddenFor(x => x.RoleCheckboxes[index].Id)
                                                @Html.HiddenFor(x => x.RoleCheckboxes[index].Name)
                                            </div>*@
                                    }
                                }

                                <span class="help-block small">
                                    <strong>Manager</strong> and <strong>Admin</strong> are the same at the moment.
                                </span>
                                @Html.ValidationMessageFor(model => model.RoleId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            <div style="margin-bottom: 20px;">&nbsp;</div>

            <div class="form-group mb-0 fixed-to-bottom-mobile fixed-to-bottom">
                <div class="row">
                    @if (Request.Browser.IsMobileDevice)
                    {
                        <div class="col-md-12">
                            <div class="btn-group d-flex" role="group">
                                <button type="submit" class="btn btn-primary btn-block mt-3 js-save">Save</button>
                                @*<button type="button" class="btn btn-quaternary btn-block mt-3 js-cancel">Cancel</button>*@
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="col-lg-2 col-md-4 col-sm-6">
                            <button type="submit" class="btn btn-primary btn-block mt-3 js-save">Save</button>
                        </div>
                        <div class="col-lg-2 col-md-4 col-sm-6">
                            @*<button type="button" class="btn btn-quaternary btn-block mt-3 js-cancel">Cancel</button>*@
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {

    @Scripts.Render("~/Porto/vendor/pnotify/js")

    <script>
        $(document).ready(function () {

            if ('@ViewBag.Saved' == 'True') {
                new PNotify({
                    title: 'Success!',
                    text: 'User saved.',
                    type: 'success'
                });
            }

            //$('input[type="checkbox"]').change(function () {
            //    var checked = $(this).is(":checked");
            //    if (checked) checked = 'true'; else checked = 'false';
            //    var name = $(this).attr('name');
            //    console.log(name + ' is checked: ' + checked);
            //    console.log('Before: ' + $('input[name="' + name + '"]').val());
            //    $('input[name="'+name+'"]').val(checked);
            //    console.log('After: ' + $('input[name="' + name + '"]').val());
            //});

        });
    </script>
}
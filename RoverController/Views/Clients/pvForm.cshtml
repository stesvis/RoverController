@model RoverController.Web.DTOs.ClientDTO

@using RoverController.Lib
@using RoverController.Web.Helper

@Html.AntiForgeryToken()
@Html.ValidationSummary(true, "", new { @class = "text-danger help-block small" })

@{

    var dropdownAttributes = new Dictionary<string, object>(Html.GetUnobtrusiveValidationAttributes(ViewData.TemplateInfo.HtmlFieldPrefix));
    dropdownAttributes.Add("class", "form-control populate placeholder");

    dropdownAttributes.Add("data-plugin-selectTwo", null);
    if (Request.Browser.IsMobileDevice)
    {
        dropdownAttributes.Add("data-plugin-options", "{\"selectOnClose\": false, \"minimumResultsForSearch\": -1}");
    }
    else
    {
        dropdownAttributes.Add("data-plugin-options", "{\"selectOnClose\": false}");
    }

    if (Model != null && Model.Id > 0)
    {
        @Html.HiddenFor(m => m.Id)
    }
}

@Html.HiddenFor(m => m.Status)
@Html.HiddenFor(m => m.Guid)
@*@Html.HiddenFor(m => m.TypeId)*@

<section class="card">
    <div class="card-body">

        <div class="form-group mb-3">
            <div class="row">
                <div class="col-lg-6 mb-3">
                    @Html.LabelFor(m => m.Name, new { @class = "control-label" })
                    @Html.EditorFor(m => m.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger help-block small" })
                </div>
                <div class="col-lg-6 mb-3">
                    @Html.LabelFor(m => m.DisplayName, new { @class = "control-label" })
                    @Html.EditorFor(m => m.DisplayName, new { htmlAttributes = new { @class = "form-control" } })
                    <span class="help-block small"><strong>Example</strong>: SCC Vauxhall</span>
                    @Html.ValidationMessageFor(model => model.DisplayName, "", new { @class = "text-danger help-block small" })
                </div>
            </div>
        </div>

        <div class="form-group mb-3">
            <div class="row">
                <div class="col-lg-6 mb-3">
                    @Html.LabelFor(m => m.Phone, new { @class = "control-label" })
                    @Html.EditorFor(m => m.Phone, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger help-block small" })
                </div>
                <div class="col-lg-6 mb-3">
                    @Html.LabelFor(m => m.Email, new { @class = "control-label" })
                    @Html.EditorFor(m => m.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger help-block small" })
                </div>
            </div>
        </div>

        <div class="form-group mb-3">
            <div class="row">
                <div class="col-lg-6 mb-3">
                    @Html.LabelFor(m => m.Notes, new { @class = "control-label" })
                    @Html.EditorFor(m => m.Notes, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger help-block small" })
                </div>
            </div>
        </div>

        @if (ViewHelper.IsSuperadmin)
        {
            <div class="form-group mb-3">
                <div class="row">
                    <div class="col-lg-6 mb-3">
                        @Html.LabelFor(m => m.ExpiryDate, new { @class = "control-label" })
                        <div class="input-group">
                            @{
                                var attributes = new Dictionary<string, object>(Html.GetUnobtrusiveValidationAttributes(ViewData.TemplateInfo.HtmlFieldPrefix));
                                attributes.Add("class", "form-control js-datepicker");
                                attributes.Add("onkeydown", "return false");
                                attributes.Add("autocomplete", "off");
                            }
                            @Html.TextBoxFor(m => m.ExpiryDate, attributes)
                            @*<input type="text" class="form-control" input-group-addon />*@
                            <span class="input-group-text custom-dark-color">
                                <span class="fas fa-calendar text-color-light"></span>
                            </span>
                            @*<input type="text" data-plugin-datepicker class="form-control">*@
                        </div>
                        @Html.ValidationMessageFor(model => model.ExpiryDate, "", new { @class = "text-danger help-block small" })
                    </div>
                    <div class="col-lg-6 mb-3">
                        @Html.LabelFor(m => m.AutoRenew, new { @class = "control-label" })
                        @Html.EditorFor(m => m.AutoRenew, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.AutoRenew, "", new { @class = "text-danger help-block small" })
                    </div>
                </div>
            </div>

            <div class="form-group mb-3">
                <div class="row">
                    @if (ViewHelper.IsSuperadmin)
                    {

                        <div class="col-lg-6 mb-3">
                            @Html.LabelFor(m => m.Fee, new { @class = "control-label" })
                            @Html.EditorFor(m => m.Fee, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Fee, "", new { @class = "text-danger help-block small" })
                        </div>
                    }
                    <div class="col-lg-6 mb-3">
                        @Html.LabelFor(m => m.IsDemo, new { @class = "control-label" })
                        @Html.EditorFor(m => m.IsDemo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.IsDemo, "", new { @class = "text-danger help-block small" })
                    </div>
                </div>
            </div>

            <br />
        }

        <div class="form-group mb-3">
            <div class="row">
                <div class="col-lg-6 mb-3">
                    @Html.LabelFor(m => m.Address1, new { @class = "control-label" })
                    @Html.EditorFor(m => m.Address1, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address1, "", new { @class = "text-danger help-block small" })
                </div>
                <div class="col-lg-6 mb-3">
                    @Html.LabelFor(m => m.Address2, new { @class = "control-label" })
                    @Html.EditorFor(m => m.Address2, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address2, "", new { @class = "text-danger help-block small" })
                </div>
            </div>
        </div>

        <div class="form-group mb-3">
            <div class="row">
                <div class="col-lg-6 mb-3">
                    @Html.LabelFor(m => m.City, new { @class = "control-label" })
                    @Html.EditorFor(m => m.City, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger help-block small" })
                </div>
                <div class="col-lg-6 mb-3">
                    @Html.LabelFor(m => m.PostalCode, new { @class = "control-label" })
                    @Html.TextBoxFor(m => m.PostalCode, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.PostalCode, "", new { @class = "text-danger help-block small" })
                </div>
            </div>
        </div>

        <div class="form-group mb-3">
            <div class="row">
                <div class="col-lg-6 mb-3">
                    @Html.LabelFor(m => m.Country, new { @class = "control-label" })
                    @Html.DropDownListFor(m => m.Country, new SelectList(ViewBag.Countries, "Key", "Value"), "", dropdownAttributes)
                    @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger help-block small" })
                </div>
                <div class="col-lg-6 mb-3">
                    @Html.LabelFor(m => m.Province, new { @class = "control-label" })
                    @Html.DropDownListFor(m => m.Province, new SelectList(ViewBag.Provinces, "Key", "Value"), "", dropdownAttributes)
                    @Html.ValidationMessageFor(model => model.Province, "", new { @class = "text-danger help-block small" })
                </div>
            </div>
        </div>
    </div>
</section>